/* vim: set textwidth=160 : */
/* $Id$ */

digraph logparser {
    graph [
        /* This seems to be width, height - but they interact strangely, so 
         * I'm never sure.
         */
        size = "5.3, 8.4"
        margin = "0"
        center = true
    ]
    node [
        shape = box
    ]
    edge [
        color = blue
        fontcolor = red
        minlen = 2
    ]

    /* EDGES */
    /* Connect from client */
    connect                         -> { rejection } [weight = 5]
    rejection                       -> { rejection } [dir = back, headport = s, tailport = nw]
    rejection                       -> { disconnect } [weight = 5]
    connect                         -> { clone }
    clone                           -> { clone } [dir = back, headport = s, tailport = ne]
    clone                           -> { disconnect }
    clone                           -> { rejection }
    rejection                       -> { clone }

    /* Disconnect without queueid */
    disconnect                      -> { if_no_queueid } [weight = 5]
    if_no_queueid                   -> { fixup_enter_in_db_disconnect }

    /* Disconnect with queueid */
    if_no_queueid                   -> { save_by_queueid } [weight = 5]

    /* Misc entry */
    pickup                          -> { save_by_queueid } [headport = n]
    qmgr_chooses_mail               -> { save_by_queueid } [headport = ne]
    /* Graph placement */
    connect                         -> { pickup } [style = invis, weight = 0]
    connect                         -> { qmgr_chooses_mail } [style = invis, weight = 0]

    /* Save results by queueid */
    save_by_queueid                 -> { track } [minlen = 5]
    track                           -> { save_by_queueid }
    save_by_queueid                 -> { save_by_queueid } [dir = back, headport = s, tailport = nw]
    save_by_queueid                 -> { commit } [weight = 10]

    /* Expired mails */
    save_by_queueid                 -> { expiry }
    expiry                          -> { commit } [weight = 0]

    /* NODE LABELS */
    rejection                       [label = "4: Postfix rejects an\nSMTP command."]
    connect                         [label = "1: Connection from remote host."]
    clone                           [label = "5: Clone when multiple mails\n(not recipients) are delivered\nduring one connection."]

    /* Disconnect without queueid */
    disconnect                      [label = "6: Normal disconnection, error\ndisconnection, or timeout by client."]
    if_no_queueid                   [label = "7: If no queueid:", shape = diamond]
    fixup_enter_in_db_disconnect    [label = "8: Clean up, enter in database.\nDelete from state tables by pid."]

    /* Disconnect with queueid - already covered */

    /* Misc entry */
    pickup                          [label = "2: Mail submitted\nvia sendmail."]
    qmgr_chooses_mail               [label = "3: Mail picked \nfor delivery\nby qmgr."]

    /* Save results by queueid */
    save_by_queueid                 [label = "9: Save by queueid."]
    track                           [label = "10: Track child of this mail\n(usually due to aliases)."]

    /* Expiry */
    expiry                          [label = "11: Mark mail as expired."]

    /* Commit is complicated */
    /* Neither parent nor child. */
    commit                          [label = "12: Mail has been delivered,\nbounced, or deleted."]

    /* SUB-GRAPHS */
    subgraph sources {
        rank = source
        pickup
        qmgr_chooses_mail
        connect
    }

    subgraph clone_or_save {
        rank = same
        clone
        rejection
    }

    subgraph disconnect_without_queueid {
        rank = same
        if_no_queueid
        fixup_enter_in_db_disconnect
    }

    subgraph save_or_track {
        rank = same
        track
        save_by_queueid
    }

}
