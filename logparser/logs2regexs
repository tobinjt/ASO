#!/usr/bin/env perl

# $Id$

use strict;
use warnings;

use lib qw(..);
use ASO::Parser;
use File::Temp;
use File::Spec;
use IO::File;
use Data::Dumper;
$Data::Dumper::Sortkeys = 1;
use List::Util qw(sum);
use Getopt::Long;
use Pod::Usage;
use Regexp::Common;

my $COUNT_STRING = q{__COUNT__};

my %Options = get_options();

# Read all the input files, replacing known regexs in each line.
debug(qq{$0: starting replace_regexs()\n});
my ($filtered_file, $number_of_lines) = replace_regexs(@ARGV);
#$filtered_file->unlink_on_destroy(0);

my $filename = $filtered_file->filename();
debug(qq{$0: Temporary file: $filename\n});
my $file = IO::File->new($filename)
    or die qq{$0: failed opening $filename: $!\n};

debug(qq{$0: starting count_frequency()\n});
my $frequency = count_frequency($file);

debug(qq{$0: starting build_pattern_hashes()\n});
my $pattern_hashes = build_pattern_hashes($file, $frequency, $number_of_lines);
debug(qq{$0: starting build_regexs()\n});
my $patterns = build_regexs($pattern_hashes, $frequency, $number_of_lines);

my $lines_matched = 0;
foreach my $regex_pair (sort { $a->[0] cmp $b->[0] } @$patterns) {
    print qq{$regex_pair->[1]\t $regex_pair->[0]\n};
    $lines_matched += $regex_pair->[1];
}
my $percent = $lines_matched * 100 / $number_of_lines;
debug(qq{Matching $lines_matched/$number_of_lines lines ($percent\%)\n});

sub count_frequency {
    my ($input) = @_;

    my %frequency;

    seek $input, 0, 0;
    while (<$input>) {
        my @fields = split /\s+/, $_;
        my $i = 0;
        foreach my $field (@fields) {
            $frequency{$field}->[$i]++;
            $i++;
        }
    }

    return \%frequency;
}

sub replace_regexs {
    my (@files) = @_;

    my $template = File::Spec->catfile(File::Spec->tmpdir(), q{X} x 16);
    my $tempfile = File::Temp->new(TEMPLATE => $template)
        or die qq{$0: failed creating tempfile (template $template): $!\n};

    # Order is important here; more specific regexs should come first.
    # These are a few standard things which need to be replaced in lots of log 
    # lines to produce rules.
    # q// is used because it makes escaping easier - no double escaping required.
    # I tried qr// but printing it produced (?-xism:) around the regex chunks.
    # Missing keywords: __SMTP_CODE__ __COMMAND__ __SHORT_CMD__
    # NOTE: in q// strings Perl will perform two substitutions:
    #   \/ will be replaced with /
    #   \\ will be replaced with \
    # This means that every \ you want in the string needs to be doubled.
    # early_regexs are applied before the line is escaped.
    my @early_regexs = (
        q/^__RESTRICTION_START__/,
    );
    my @regexs = (
        q/from=<(__SENDER__)>/,
        q/to=<(__RECIPIENT__)>,(?: orig_to=<__RECIPIENT__>,)?/,
        q/helo=<(__HELO__)>/,
        q/<__RECIPIENT__>: Recipient address rejected:/,
        q/<__SENDER__>: Sender address rejected:/,
        q/<__HELO__>: Helo command rejected:/,
        q/<__RECIPIENT__>: Relay access denied:/,
        # In the input [] will be replaced by \[\], so I need to match \\\[, 
        # and every \ needs to be doubled.
        [q/(__HOSTNAME__)\\\\\\[(__IP__)\\\\\\]/, q/(__HOSTNAME__)\[(__IP__)\]/],
        [q/(__IPv4__|__IPv6__)/, q/(__IP__)/],
        q/hostname (__HOSTNAME__) verification failed:/,
        q/(__HOSTNAME__): Host not found(?:, try again)?/,
        # This won't catch every queueid, but it's a start.
        q/^(__QUEUEID__)/,
        q/(?:__CONN_USE__)?__DELAY__(?:__DELAYS__)?(?:dsn=__DSN__,\s)?/,
        q/proto=E?SMTP/,
        q/(?:resent-)?message-id=(__MESSAGE_ID__)$/,
    );
    
    my @early_regex_pairs = compile_regexs(@early_regexs);
    my @regex_pairs = compile_regexs(@regexs);

    my ($num_lines) = 0;
    local @ARGV = @files;
    while (<>) {
        $num_lines++;

        # Early regexs are attempted before the escaping of input lines, 
        # because otherwise __RESTRICTION_START__ and possibly others would
        # never match.
        foreach my $early_pair (@early_regex_pairs) {
            my ($replacement, $pattern) = @$early_pair;
            s/$pattern/$replacement/g;
        }

        # These need to be escaped in the input lines, and the regexs above
        # need to take the escaping into account.
        s/\[/\\[/g;
        s/\]/\\]/g;
        s/\(/\\(/g;
        s/\)/\\)/g;
        s/\?/\\?/g;

        foreach my $pair (@regex_pairs) {
            my ($replacement, $pattern) = @$pair;
            s/$pattern/$replacement/g;
        }

        # name=value pairs need to be replaced separately.
        s/(\w+)=\d+/$1=\\d+/g;
        print $tempfile $_;
    }

    # This is important for small files, because we reopen this temporary file
    # later, so we need to ensure that all data has been flushed to the kernel
    # (not necessarily to disk, but definitely to the kernel).
    $tempfile->flush();
    return ($tempfile, $num_lines);
}

sub compile_regexs {
    my (@regexs) = @_;

    my @regex_pairs;
    foreach my $regex (@regexs) {
        if (ref $regex) {
            my ($unfiltered_regex, $replacement) = @$regex;
            my $filtered_regex = ASO::Parser::filter_regex(undef, $unfiltered_regex);
            push @regex_pairs, [$replacement, qr/$filtered_regex/];
        } else {
            my $filtered_regex = ASO::Parser::filter_regex(undef, $regex);
            push @regex_pairs, [$regex, qr/$filtered_regex/];
        }
    }

    return @regex_pairs;
}

sub build_pattern_hashes {
    my ($input, $frequency_table, $num_lines) = @_;
    seek $input, 0, 0;

    my %patterns;
    # Only use words which are present in 0.05% or more of lines.
    my $minimum_frequency = parse_frequency($Options{q{word-frequency}},
        $num_lines);

    while (<$input>) {
        my @words = split /\s+/, $_;
        my $pattern = \%patterns;
        my $i = 0;
        foreach my $word (@words) {
            if ($frequency_table->{$word}->[$i] < $minimum_frequency) {
                $frequency_table->{q{.+}}->[$i] += $frequency_table->{$word}->[$i];
                $word = q{.+};
            }
            if (not exists $pattern->{$word}) {
                $pattern->{$word} = {};
            }
            $pattern = $pattern->{$word};
            $i++;
        }
        $pattern->{$COUNT_STRING}++;
    }

    return \%patterns;
}

sub build_regexs {
    my ($pattern_hash, $frequency_table, $num_lines) = @_;

    my @patterns = build_regexs_recursive($pattern_hash, q{}, $frequency_table, 0);
    my %no_dupes;
    foreach my $pattern (@patterns) {
        my ($regex, $count) = @$pattern;
        # There'll be an extra space at the start of the line.
        $regex =~ s/^ //;
        # Replace sequences of '.+ .+ etc' with '.+'
        $regex =~ s/(?:\.\+ )+/.+ /g;
        $regex =~ s/(?: \.\+)+/ .+/g;
        $regex =~ s/(?:\.\+ \.\+)+/.+/g;
        $no_dupes{$regex} += $count;
    }

    my @modified_patterns;
    my $min_matches = parse_frequency($Options{q{line-frequency}}, $num_lines);
    REGEX:
    foreach my $regex (keys %no_dupes) {
        if ($no_dupes{$regex} < $min_matches) {
            my $percent = sprintf q{%.4f}, $no_dupes{$regex} * 100 / $num_lines;
            debug(qq{discarding regex: $no_dupes{$regex}/$num_lines ($percent\%): $regex\n});
            next REGEX;
        }
        my $count = $no_dupes{$regex};
        # Add start and end anchors to speed up failure when matching.
        if ($regex !~ m/^\^/) {
            $regex =~ s/^/^/;
        }
        if ($regex !~ m/\$$/) {
            $regex =~ s/$/\$/;
        }
        push @modified_patterns, [$regex => $count];
    }
    return \@modified_patterns;
}

# Returns an array of (regex => count) pairs.
sub build_regexs_recursive {
    my ($pattern_hash, $regex, $frequency_table, $word_pos) = @_;

    my @patterns;
    foreach my $piece (sort keys %$pattern_hash) {
        if ($piece eq $COUNT_STRING) {
            push @patterns, [$regex => $pattern_hash->{$piece}];
        } else {
            my $word_freq = $frequency_table->{$piece}->[$word_pos];
            #my $new_regex = qq{$regex $piece\($word_freq\)};
            my $new_regex = qq{$regex $piece};
            push @patterns, build_regexs_recursive(
                $pattern_hash->{$piece}, $new_regex,
                $frequency_table, $word_pos + 1
            );
        }
    }

    return @patterns;
}

sub debug {
    my $time = localtime;
    warn $time, q{ }, @_;
}

sub getopt_to_key {
    my (%opts) = @_;
    my %names;

    map {
        my ($key, $value) = ($_, $opts{$_});
        $key =~ s/[!|=].*//;
        $names{$key} = $value;
    } keys %opts;

    return %names;
}

sub get_options {
    my %opts = (
        q{word-frequency|w=s}       => q{1%},
        q{line-frequency|l=s}       => q{1%},
        q{help|h}                   => 0,
        q{version|v}                => 0,
    );

    my @switches    = keys %opts;
    %opts           = getopt_to_key(%opts);

    Getopt::Long::Configure qw(no_getopt_compat permute bundling);
    Getopt::Long::GetOptions(\%opts, @switches) or pod2usage(2);

    if ($opts{help}) {
        pod2usage(1);
    }
    if ($opts{version}) {
        my $version = q{$Id$};
        print qq{$0 version $version\n};
        exit 0;
    }

    return %opts;
}

sub parse_frequency {
    my ($user_frequency, $num_lines) = @_;

    if ($user_frequency =~ m/^($RE{num}{real})%$/) {
        # foo % of the number of lines.
        return $num_lines * $1 / 100;
    } elsif ($user_frequency =~ m/^($RE{num}{real})$/) {
        # An exact number of lines.
        return $user_frequency;
    } else {
        die <<"DEATH";
$0: bad frequency $user_frequency; expecting a number or a percentage
DEATH
    }
}

=pod

=head1 NAME

logs2regexs - create new regexes from unparsed Postfix log lines

=head1 VERSION

This documentation refers to logs2regexs version $Id$

=head1 SYNOPSIS

    # Parse mail.log.1, saving unparsed lines
    logparser --parse_lines_only mail.log.1 2> warnings
    # Extract the unparsed lines
    grep 'unparsed line: ' warnings | cut -d ' ' -f 7- > unparsed-lines
    # Process the unparsed lines to create new regexes
    logs2regexs unparsed-lines > new-regexes

=head1 DESCRIPTION

logs2regexs reads unparsed Postfix log lines and creates regexes which match
those lines.  These regexes can then be used to create new rules for use by
logparser(1).

=head1 OPTIONS

Defaults are equivalent to:
    logs2regexs --word-frequency 1% --line-frequency 1%

=over 4

=item --word-frequency FREQUENCY

Set the frequency which determines whether a word is fixed or variable.  If the
word appears in more than FREQUENCY lines it is taken to be fixed, otherwise it
is variable and will be replaced by .+ in the generated regex.  If FREQUENCY
ends with % it is taken to be a percentage of the input lines rather than a
fixed threshold.  1% is the default value and is a reasonable starting point.

=item --line-frequency FREQUENCY

Set the frequency which determines whether a regex is retained or discarded.  If
the regex matches more than FREQUENCY lines it is retained, otherwise it is
discarded.  If FREQUENCY ends with % it is taken to be a percentage of the input
lines rather than a fixed threshold.  1% is the default value and is a
reasonable starting point.  If regexes are discarded the generated regexes will
not match all input lines; simply add the regexes as new rules to the database
(see logparser(1)), rerun logparser(1), and rerun logs2regexs on the resulting
unparsed lines.

=back

=head1 ALGORITHM

The frequency with which a word occurs at that point in a line is used to
determine whether the word is fixed or variable: fixed words are retained,
whereas variable words are replaced by .+ in the generated regex.  The original
algorithm was developed by Risto Vaarandi for SLCT (simple logfile clustering
tool), available from http://kodu.neti.ee/~risto/slct/

The full algorithm:

=over 4

=item Preprocessing

Commonly occurring variable words such as IP addresses, email addresses, start
of rejection messages etc. are substituted with keywords which ASO::Parser will
later expand when loading rules (full details of the keywords are available in
ASO::Parser's documentation).  This improves the resulting regexes in two ways:
the regexes are more precise, and provide more information to the user, e.g.
compare:

    ^connect from (__HOSTNAME__)\[(__IP__)\]$
    ^connect from (.+)\[(.+)\]$

The newly substituted lines are saved to a temporary file which is used as input
to the remaining stages.

=item Calculate word frequency

The position of words within a line is important: a common word does not
indicate similarity between lines unless it occupies the same position within
both lines.  The algorithm maintains a counter for each B<(word, word's position
within the line)> tuple, incrementing it each time that word occurs in that
position.

=item Classify words based on frequency

The frequency of each B<(word, word's position within the line)> tuple is
checked: if its frequency is greater than the threshold supplied by the user (1%
of all lines is generally a good starting point) it is classified as a fixed
word, otherwise it is classified as a variable term.  Variable terms are
replaced by .+, which means to match zero or more of any character.

=item Build regexes

The words are reassembled to produce a regex matching the line, and a counter is
maintained for each regex.  Contiguous sequences of .+ in the newly reassembled
regexes are collapsed to a single .+; any resulting duplicate regexes are
combined, and their counters summed.  If the frequency of a regex is lower than
the threshold supplied by the user the regex is discarded.  The new regexes are
printed for the user to add to the database, either as new rules or merged into
the regexes

=back

=head1 CONFIGURATION AND ENVIRONMENT

None.

=head1 DEPENDENCIES

Modules packaged with logparser: ASO::DB, ASO::Parser (both have additional
dependencies, see their documentation for details).

Standard Perl modules: Getopt::Long, Pod::Usage, File::Temp, File::Spec,
IO::File, Data::Dumper, List::Util.

Other modules: Regexp::Common.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

No bugs known.  Bug reports and optionally patches welcome.

The regexes produced are not as good as those produced by a human, but they are
a good starting point.

=head1 AUTHOR

John Tobin <tobinjt@cs.tcd.ie>

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2006-2007 John Tobin <tobinjt@cs.tcd.ie>.  All rights reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See L<perlartistic>.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 

=cut
