#!/usr/bin/env perl

# $Id$

use strict;
use warnings;

use DBI;
use IO::File;
use Getopt::Long;
use Pod::Usage;

my %Options = get_options();

my $DB = DBI->connect(
    $Options{database},
    $Options{username},
    $Options{password},
    { 
        RaiseError => 1,
        AutoCommit => 0,
    }
);
if (not $DB) {
    die qq{$0: Couldn't connect to database: } . $DBI::errstr . qq{\n};
}

my $current_file;
my $line_number;
my $failures = 0;
my $current_block = q{};

READ:
while (<>) {
    # Initialise on the first iteration.
    if (not defined $current_file) {
        $current_file = $ARGV;
        $line_number = $.;
    }

    # Skip comment lines.
    if (m/^\s*--/) {
        next READ;
    }

    if ($current_file ne $ARGV) {
        # We've run off the end of the file
        run_sql($current_block);
        $current_block = $_;
        $current_file = $ARGV;
        $line_number = $.;
        next READ;
    }

    if (m/^\s*$/ or m/\);\s*$/) {
        # End of the SQL paragraph.
        $current_block .= $_;
        run_sql($current_block);
        $current_block = q{};
        $line_number = $. + 1;
    } else {
        $current_block .= $_;
    }
} continue {
    if (eof) {
        # Close the current file when we reach the end of it to reset $.
        close ARGV;
    }
}

sub run_sql {
    my ($sql) = @_;
    if ($sql !~ m/\w/) {
        # Only empty lines, skip.
        return;
    }
#    print qq{running $sql};
    eval {
        # Warning!!!!  SQLite3 only runs the first command in the block of code,
        # ignoring any others there may be, so you need to separate them into
        # paragraphs.
        $DB->do($sql);
    };
    if ($@) {
        warn qq{Failed to run SQL: $ARGV: $line_number:\n},
             qq{error message: $DBI::errstr\n},
             qq{SQL: $sql};
        $failures++;
    }
}

if ($failures) {
    $DB->rollback();
} else {
    $DB->commit();
}
$DB->disconnect();
exit $failures;

sub get_options {
    my %opts = (
        q{database=s}   => q{dbi:SQLite:dbname=db.sq3},
        q{username=s}   => undef,
        q{password=s}   => undef,
        q{help|h}       => 0,
        q{version|v}    => 0,
    );

    my @switches    = keys %opts;
    %opts           = getopt_to_key(%opts);

    Getopt::Long::Configure qw(no_getopt_compat permute bundling);
    Getopt::Long::GetOptions(\%opts, @switches) or pod2usage(2);

    if ($opts{help}) {
        pod2usage(1);
    }
    if ($opts{version}) {
        my $version = q{$Id$};
        print qq{$0 version $version\n};
        exit 0;
    }
    return %opts;
}

sub getopt_to_key {
    my (%opts) = @_;
    my %names;

    map {
        my ($key, $value) = ($_, $opts{$_});
        $key =~ s/[!|=].*//;
        $names{$key} = $value;
    } keys %opts;

    return %names;
}

=pod

=head1 NAME

setup-database - run the SQL contained in the input files to set up a database

=head1 VERSION

This documentation refers to setup-database version $Id$

=head1 SYNOPSIS

    setup-database [OPTIONS] FILE[S]
    setup-database --database dbi:SQLite:dbname=db.sq3 create-tables-sqlite3.sql populate-rules.sql

=head1 DESCRIPTION

setup-database runs the SQL in the FILE[S] to do whatever you want to the
database specified.  It's useful for creating tables and populating a database
with initial data, though it may have other uses also.

=head1 OPTIONS

Defaults are equivalent to:
    setup-database --database dbi:SQLite:dbname=db.sq3

=over 4

=item --username USERNAME

The username to use when connecting to the database; defaults to undef.

=item --password PASSWORD

The password to use when connecting to the database; defaults to undef.

=item --database DATABASE

The database to connect to, in standard DBI form - see the documentation for DBI
and the driver for the database you're using.  Defaults to
C<dbi:SQLite:dbname=db.sq3>

=back

=head1 EXIT STATUS

Exits successfully (0) if there were no errors, exits unsuccessfully (1) if
there were errors.  No attempt is made to distinguish between different errors,
but error messages from the database will be displayed.  If there are errors the
transaction will be rolled back; depending on your database some changes may not
be rolled back, particularly if you add, alter or delete tables, views, etc.

=head1 NOTES

SQLite3, when used through DBI, executes only the first statement in a multi
statement line.  The following won't do what you expect:

    delete from foo; delete from bar; delete from baz;

The first statement will be executed, the following two will be ignored (it does
work properly when using the sqlite3 command line client).  For this reason
setup-database splits the input into paragraphs and feeds each paragraph
individually to the database.  Paragraphs are separated by blank lines, or a
line ending in B<);>.  It B<does not> attempt to split lines containing multiple
statements, because that would require proper, database specific, SQL parsing.
The splitting is not expected to be perfect, it's just enough for the author's
needs.

=head1 CONFIGURATION AND ENVIRONMENT

None.

=head1 DEPENDENCIES

Standard Perl modules: Getopt::Long, Pod::Usage, IO::File, DBI, DBD::I<foo> -
whichever I<foo> is appropriate for your database.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

No bugs known.  Bug reports and optionally patches welcome.

The SQL parsing has been tested with SQLite3 only, and may not work for other
SQL dialects, though it is extremely simple so will most likely work; you'll
probably only have problems if your database uses something other than -- to
indicate comments.

=head1 AUTHOR

John Tobin <tobinjt@cs.tcd.ie>

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2006-2007 John Tobin <tobinjt@cs.tcd.ie>.  All rights reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See L<perlartistic>.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 

=cut
