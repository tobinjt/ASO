#!/bin/bash

# Run logparser a lot of times on all the input log files to generate 
# timing information to use in producing statistics.

set -u -e

if [ "$#" != 2 ]; then
    echo "Usage: $0 output-directory initial-database" 1>&2
    exit 1
fi

dir="$1"
loglist="../logparser/logs-some"
initial_db="$2"
if [ ! -f "$loglist" ]; then
    echo "$0: $loglist is not a file" 1>&2
    exit 1;
fi
mkdir -p "$dir"

# Try to load libraries, modules etc in advance.
perl ../logparser/logparser --help > /dev/null

rule_order_dir=$( basename "$dir" );
rule_order_dir="$rule_order_dir/rule_order"
if [ ! -d "$rule_order_dir" ]; then
    echo "rule_order directory $rule_order_dir doesn't exist" >&2
    exit 1
fi
old_state=""
db="$initial_db"
for log in $( < "$loglist" ); do
    filename=$( basename "$log" .gz )
    state="$dir/state.$filename"
    in_state=
    if [ -f "$old_state" ]; then
        in_state="--in-statefile $old_state"
    fi
    date 1>&2
    echo "$filename: cat" 1>&2
    cat "$log" > /dev/null
    for i in $( seq 1 10 ); do
        echo "LOGPARSER_SWITCHES='$LOGPARSER_SWITCHES' OUTPUT: '$dir' DB: '$db' PARSING FILE: '$filename' ITERATION: $i"
        cp -p "$db" ../sql/db.sq3
        perl ../logparser/logparser --year 2007 \
            --out-statefile "$state" $in_state \
            --timing-data "$dir/timing.$filename.$i" \
            --in-rule-order "$rule_order_dir/rule-order-$filename" \
            --skip_inserting_results \
            $LOGPARSER_SWITCHES \
            "$log" 2> "$dir/warnings.$filename.$i"
        sync
        sync
        sleep 1
    done
    old_state="$state"
    old_db="$dir/db.$filename.sq3"
    cp ../sql/db.sq3 "$old_db"
    db="$old_db"
    echo "$filename: finished" 1>&2
done
