#!/usr/bin/env perl

# $Id$

use strict;
use warnings;

use File::Slurp;
use List::Util qw(sum);
use Getopt::Long;
require q{time2secs.pl};

sub usage {
    my ($status) = @_;
    my $usage = qq{Usage: $0 [--discard-first] [--help] <list of files>\n};
    if ($status) {
        warn $usage;
    } else {
        print $usage;
    }
    exit $status;
}

@ARGV or usage(1);

my %Options = (
    q{discard-first}    => 0,
    help                => 0,
);
GetOptions(\%Options,
    q{discard-first},
    q{help|h},
) or usage(1);

if ($Options{help}) {
    usage(0);
}

print qq{# file_num first_value mean stddev num_values filename\n};
my $file_num = 1;
foreach my $file (@ARGV) {
    my @values = read_file($file);
    chomp @values;

    # The first value is sometimes quite divergent from the others, so there's
    # an option to discard it.
    if ($Options{q{discard-first}}) {
        shift @values;
    }

    @values = map { time2secs($_) } @values;

    my $first_value = $values[0];
    my $num_values = @values;
    my $mean = sum(@values) / $num_values;
    my $sum_of_differences = 0;
    foreach my $value (@values) {
        $sum_of_differences += (($value - $mean) ** 2);
    }
    my $stddev = sqrt ($sum_of_differences / $num_values);
    print qq{$file_num $first_value $mean $stddev $num_values "$file"\n};
    $file_num++;
}
