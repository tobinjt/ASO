#!/usr/bin/env perl

# $Id$

use strict;
use warnings;

use File::Slurp;
use List::Util qw(sum);
use Getopt::Long;
use IO::Dir;
use File::Spec::Functions qw(catfile);
use Regexp::Common;

sub usage {
    my ($status) = @_;
    my $usage = qq{Usage: $0 [--discard-first] [--help] <directory>\n};
    if ($status) {
        warn $usage;
    } else {
        print $usage;
    }
    exit $status;
}

my %Options = (
    q{discard-first}    => 0,
    help                => 0,
);
GetOptions(\%Options,
    q{discard-first},
    q{help|h},
) or usage(1);

if ($Options{help}) {
    usage(0);
}

scalar @ARGV == 1 or usage(1);

my $directory = $ARGV[0];
my $dir = IO::Dir->new($directory)
    or die qq{$0: failed opening $directory: $!\n};

print qq{# file_num first_value mean stddev num_values filename\n};

my %data;
FILE:
while (my $file = $dir->read()) {
    $file =~ m/^(timing\..*)\.(\d{1,2})$/ or next FILE;
    my ($prefix, $number) = ($1, $2);
    my $filename = catfile($directory, $file);

    if (not exists $data{$prefix}) {
        $data{$prefix} = [];
    }

    my (@lines) = read_file($filename);
    foreach my $line (@lines) {
        if ($line =~ m/^Parsed logfile:.*: ($RE{num}{real})$/) {
            $data{$prefix}->[$number] = $1;
        }
    }
}

my $file_num = 1;
foreach my $logfile (sort keys %data) {
    my $values = $data{$logfile};
    # Strip the first undef element.
    shift @$values;
    if ($Options{q{discard-first}}) {
        shift @$values;
    }

    my $first_value = $values->[0];
    my $num_values = @$values;
    my $mean = sum(@$values) / $num_values;
    my $sum_of_differences = 0;
    foreach my $value (@$values) {
        $sum_of_differences += (($value - $mean) ** 2);
    }
    my $stddev = sqrt ($sum_of_differences / $num_values);
    print qq{$file_num $first_value $mean $stddev $num_values "$logfile"\n};
    $file_num++;
}
